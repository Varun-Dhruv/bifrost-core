version: "3.0"
volumes:
  postgres_data:
  redis_data:
  jobmanager-checkpoints:
  taskmanager-checkpoints:
  job-jars:
networks:
  flink:
    name: flink
    driver: bridge
services:
  app:
    image: "varun10000/bifrost-core:latest"
    container_name: bifrost-core
    command: sh -c "
      cd app &&
      python manage.py makemigrations &&
      python manage.py migrate &&
      python manage.py runserver 0.0.0.0:80"
    build:
      context: ./src
      dockerfile: Dockerfile
    restart: always
    env_file:
      - ./envs/.env.production
    ports:
      - 8000:80
    profiles:
      - "dev"
    volumes:
      - ./src/app:/code/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      kinto:
        condition: service_started
  celery-worker:
    image: "varun10000/bifrost-core:latest"
    container_name: celery-worker
    command: sh -c  "cd app && celery -A core worker -l INFO"
    build:
      context: ./src
      dockerfile: Dockerfile
    restart: always
    env_file:
      - ./envs/.env.production
    profiles:
      - "dev"
    volumes:
      - ./src/app:/code/app
    depends_on:
      app:
        condition: service_started
  job-server:
    image: apache/beam_flink1.16_job_server:latest
    container_name: job-server
    ports:
      - 8099:8099
      - 8098:8098
    command: --flink-master=flink-jobmanager:8081
    profiles:
      - "dev"
      - "flink"
    environment:
      - JOB_MANAGER_RPC_ADDRESS=localhost
      - JOB_MANAGER_RPC_PORT=6123
      - JOB_MANAGER_HEAP_SIZE=1024m
      - JOB_MANAGER_WEB_PORT=8081
      - REST_PORT=8081
      - FLINK_MASTER=localhost:8081
      - JOB_PORT=8099
      - PARRALLELISM=2
      - JOB_ARTIFACT_PORT=8098
      - JOB_JAR_DIRECTORY=/opt/job-jars
      - JOB_ARTIFACT_DIRECTORY=/opt/job-artifacts
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - job-jars:/opt/job-jars
  flink-jobmanager:
    image: "apache/flink:1.16"
    container_name: flink-jobmanager
    command: jobmanager
    profiles:
      - "dev"
      - "flink"
    ports:
      - 6123:6123
      - 6124:6124
      - 8081:8081
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager
      - JOB_MANAGER_RPC_PORT=6123
      - JOB_MANAGER_HEAP_SIZE=1024m
      - JOB_MANAGER_WEB_PORT=8081
      - JOB_MANAGER_REST_PORT=8081
      - REST_PORT=8081
      - PARRALLELISM=2
      - JOBMANAGER_MEMORY=1600m
    volumes:
      - jobmanager-checkpoints:/opt/flink/usrlib/flink/checkpoints

  flink-taskmanager:
    image: apache/flink:1.16
    command: taskmanager
    container_name: flink-taskmanager
    profiles:
      - "dev"
      - "flink"
    depends_on:
      - flink-jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager
      - JOB_MANAGER_RPC_PORT=6123
      - TASK_MANAGER_RPC_PORT=6122
      - JOB_MANAGER_HEAP_SIZE=1024m
      - JOB_MANAGER_WEB_PORT=8081
      - JOB_MANAGER_REST_PORT=8081
      - PARRALLELISM=2
      - BEAM_PROVISION_ENDPOINT=flink-jobmanager:8081
      - BEAM_ARTIFACT_ENDPOINT=flink-jobmanager:8098
    volumes:
      - jobmanager-checkpoints:/opt/flink/usrlib/flink/checkpoints
  flink-worker:
    image: "varun10000/bifrost-core:latest"
    build:
      context: ./src
      dockerfile: Dockerfile
    working_dir: "/code/app"
    command: sh -c "/opt/apache/beam/boot --worker_pool"
    # entrypoint: "" 
    container_name: flink-worker
    network_mode: "service:flink-taskmanager"
    profiles:
      - "dev"
      - "flink"
    depends_on:
      - flink-jobmanager
    volumes:
      - ./src/app:/code/app
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager
      - JOB_MANAGER_RPC_PORT=6123
      - TASK_MANAGER_RPC_PORT=6122
      - JOB_MANAGER_HEAP_SIZE=1024m
      - JOB_MANAGER_WEB_PORT=8081
      - JOB_MANAGER_REST_PORT=8081
      - PARRALLELISM=2
      - BEAM_PROVISION_ENDPOINT=flink-jobmanager:8081
      - BEAM_ARTIFACT_ENDPOINT=flink-jobmanager:8098
  postgres:
    image: postgres:14
    container_name: postgres
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - ./envs/.env.production
    ports:
      - 5432:5432
    profiles:
      - "dev"
      - "database"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
  kinto:
    image: "kinto/kinto-server:latest"
    container_name: kinto
    restart: always
    command: sh -c "kinto start"
    env_file:
      - ./envs/.env.production
    ports:
      - 8888:8888
    profiles:
      - "dev"
    depends_on:
      postgres:
        condition: service_healthy
  redis:
    image: "redis:7.0"
    container_name: redis
    restart: always
    ports:
      - 6379:6379
    env_file:
      - ./envs/.env.production
    volumes:
      - redis_data:/data
    profiles:
      - "dev"
      - "cache"
  kafka:
    image: "bitnami/kafka:3.4"
    container_name: kafka
    restart: always
    ports:
      - 9092:9092
      - 9999:9999
    environment:
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_PORT: 9092
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper
    profiles:
      - "message-broker"
  zookeeper:
    image: "zookeeper:3.8.3"
    container_name: zookeeper
    restart: always
    ports:
      - 2181:2181
      - 2888:2888
      - 3888:3888
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ALLOW_ANONYMOUS_LOGIN: yes
    profiles:
      - "message-broker"
